# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  push:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Build with Gradle
        env:
          BALLERINA_CENTRAL_ACCESS_TOKEN: ${{ secrets.BALLERINA_CENTRAL_ACCESS_TOKEN }}
          JAVA_OPTS: -DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true
        run: |
           ./gradlew build -Prelease=true

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Apply automatic changes

          # Optional options appended to `git-commit`
          # See https://git-scm.com/docs/git-commit for a list of available options
          commit_options: '--no-verify --signoff'

          # Optional glob pattern of files which should be added to the commit
          # Defaults to all (.)
          # See the `pathspec`-documentation for git
          # - https://git-scm.com/docs/git-add#Documentation/git-add.txt-ltpathspecgt82308203
          # - https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefpathspecapathspec
          file_pattern: package-hashes.properties

          # Optional local file path to the repository
          # Defaults to the root of the repository
          repository: .

          # Optional commit user and author settings
#          commit_user_name: Ballerinax OpenAPI connectors GitHub Actions Bot # defaults to "GitHub Actions"
#          commit_user_email: my-github-actions-bot@example.org # defaults to "actions@github.com"
#          commit_author: Author <actions@github.com> # defaults to author of the commit that triggered the run

          # Optional tag message
          # Action will create and push a new tag to the remote repository and the defined branch
#          tagging_message: 'v1.0.0'

          # Optional options appended to `git-push`
          # See git-push documentation for details: https://git-scm.com/docs/git-push#_options
          push_options: '--force'

          # Optional: Disable dirty check and always try to create a commit and push
          skip_dirty_check: true

          # Optional: Skip internal call to `git fetch`
          skip_fetch: true

          # Optional: Prevents the shell from expanding filenames. Details: https://www.gnu.org/software/bash/manual/html_node/Filename-Expansion.html
          disable_globbing: true

#      - name: Create Pull Request
#        id: cpr
#        uses: peter-evans/create-pull-request@v3
#        with:
#          token: ${{ secrets.PAT }}
#          commit-message: Update report
#          committer: GitHub <noreply@github.com>
#          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
#          signoff: false
#          branch: master
#          delete-branch: true
#          title: 'Updating Package Hashes'
#          body: |
#            Update package hashes
#            - This is an Auto-generated Pull Request by [create-pull-request][1]
#
#            [1]: https://github.com/peter-evans/create-pull-request
#          draft: false
#
#      - name: Check outputs
#        run: |
#          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
#          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"
