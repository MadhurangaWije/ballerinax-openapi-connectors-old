import org.ballerinax.openapi.validator.Utils

buildscript {
    dependencies {
        classpath files("libs/ballerinax-openapi-validator-1.0-SNAPSHOT-all.jar")
    }
}

plugins {
    id 'java'
    id "com.github.spotbugs" version "${githubSpotbugsVersion}"
    id "com.github.johnrengelman.shadow" version "${githubJohnrengelmanShadowVersion}"
    id "de.undercouch.download" version "${underCouchDownloadVersion}"
    id "net.researchgate.release" version "${researchgateReleaseVersion}"
}

apply plugin: 'jacoco'
apply plugin: 'maven-publish'

def ballerinaDistributionPath = System.getenv("BALLERINA_DIST")
List<String> updatedBallerinaPackages = new ArrayList<>();
boolean release = new Boolean(project.property("release").toString())

// TODO: Remove this cleanup task once the file override enabled
task cleanup {
    println "Cleaning up generated code..."
    Utils.loadOpenAPIProperties(project.projectDir.absolutePath)
    updatedBallerinaPackages = Utils.findUpdatedBallerinaPackages(project.projectDir.absolutePath);
    updatedBallerinaPackages.each {
        dir->exec{
            commandLine 'sh', '-c', "find ${dir} -name '*.bal' -type f -delete"
        }
    }
    updatedBallerinaPackages.each {
        dir->exec{
            commandLine 'sh', '-c', "find ${dir} -name 'target' -type d -exec rm -rf {} +"
        }
    }
    updatedBallerinaPackages.each {
        dir->exec{
            commandLine 'sh', '-c', "find ${dir} -name 'resources' -type d -exec rm -rf {} +"
        }
    }
}

task codegen {
    Utils.loadOpenAPIProperties(project.projectDir.absolutePath)
    updatedBallerinaPackages = Utils.findUpdatedBallerinaPackages(project.projectDir.absolutePath);

    for(String updatedPackagePath : updatedBallerinaPackages){
        List<String> updatedYamlFiles = Utils.findOpenAPIs(updatedPackagePath);
        println "Code generation..."
        updatedYamlFiles.each {
            file->exec{
                commandLine 'sh', '-c', "${ballerinaDistributionPath}bin/bal openapi -i ${file} --mode client -o ${updatedPackagePath}"
            }
        }
    }

    for (String path : updatedBallerinaPackages) {
        if(release) {
            println "Update Ballerina.toml version"
            Utils.bumpBallerinaTomlVersion(path);
        }
        println "Code building..."
        exec {
            commandLine 'sh', '-c', "${ballerinaDistributionPath}bin/bal build -c ${path}"
        }
    }

    for (String path : updatedBallerinaPackages) {
        exec {
            commandLine 'sh', '-c', "cd ${path}"
        }

        exec {
            workingDir "${path}"
            commandLine 'sh', '-c', "${ballerinaDistributionPath}bin/bal push --repository=local"
        }
    }
}

task releaseConnector {
    if (project.hasProperty("release") ) {
        if(release){
            for (String path : updatedBallerinaPackages) {
                println "Pushing to Ballerina central..."
                exec {
                    workingDir "${path}"
                    commandLine 'sh', '-c', "${ballerinaDistributionPath}bin/bal push"
                }
                println "Update package hashes"
            }
            Utils.updateChangedFilesHashes(project.projectDir.absolutePath, updatedBallerinaPackages)
        }
    }
}
