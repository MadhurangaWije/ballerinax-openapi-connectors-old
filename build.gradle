//import org.openapi.buildutil.pathfinder.PathFinder;
import org.ballerinax.openapi.validator.Utils
import org.ballerinax.openapi.validator.Validator;


buildscript {
    dependencies {
        classpath files("libs/ballerinax-openapi-validator-1.0-SNAPSHOT-all.jar")
    }
}

plugins {
    id 'java'
    id "com.github.spotbugs" version "${githubSpotbugsVersion}"
    id "com.github.johnrengelman.shadow" version "${githubJohnrengelmanShadowVersion}"
    id "de.undercouch.download" version "${underCouchDownloadVersion}"
    id "net.researchgate.release" version "${researchgateReleaseVersion}"
}

apply plugin: 'jacoco'
apply plugin: 'maven-publish'

def ballerinaDistributionPath = System.getenv("BALLERINA_DIST")
def buildDirectoryList = []
List<String> updatedBallerinaPackages = [];

repositories {
    mavenLocal()
    flatDir {
        dirs "libs"
    }
}

dependencies {
    compile fileTree(dir: 'libs', includes: ['*.jar'])
}


task validate {
    println "File validating..."
    Utils.loadOpenAPIProperties(project.projectDir.absolutePath)
    updatedBallerinaPackages = Utils.findUpdatedBallerinaPackages(project.projectDir.absolutePath);
    println updatedBallerinaPackages
    for (String ballerinaPackage : updatedBallerinaPackages) {
        final List<String> openAPIs = Utils.findOpenAPIs(ballerinaPackage);
        for (String openAPI : openAPIs) {
            Validator.validateOpenAPI(openAPI);
        }
    }
}

task cleanup {
    println "Cleaning up generated code..."
    updatedBallerinaPackages.each {
        dir->exec{
            commandLine 'sh', '-c', "find ${dir} -name '*.bal' -type f -delete"
        }
    }
    buildDirectoryList.each {
        dir->exec{
            commandLine 'sh', '-c', "find ${dir} -name 'target' -type d -exec rm -rf {} +"
        }
    }
    buildDirectoryList.each {
        dir->exec{
            commandLine 'sh', '-c', "find ${dir} -name 'resources' -type d -exec rm -rf {} +"
        }
    }
}

task codegen {
    println "Code generation..."

    // change the logic to generate code for each changed yaml file
    updatedBallerinaPackages.each {
        path->exec{
            String updatedYamlFile = Utils.findUpdatedYamlFile(path);
            if (!updatedYamlFile.isEmpty()){
                commandLine 'sh', '-c', "${ballerinaDistributionPath}/bal openapi -i ${updatedYamlFile} --mode client -o ${path}"
            }
        }
    }

    println "Code building..."
    updatedBallerinaPackages.each{
        path->exec{
            commandLine 'sh', '-c', "${ballerinaDistributionPath}/bal build -c ${path}"
        }
    }
}

task releaseConnector {
    if (project.hasProperty("release") ) {
        boolean release = new Boolean(project.property("release").toString())
        if(release){
            println "Pushing to Ballerina central..."
            for (String path : updatedBallerinaPackages) {
                exec {
                    commandLine 'sh', '-c', "cd ${path}"
                }
                exec {
                    workingDir "${path}"
                    commandLine 'sh', '-c', "${ballerinaDistributionPath}/bal push"
                }
            }
            println "Update package hashes"
            Utils.updateChangedFilesHashes(project.projectDir.absolutePath, updatedBallerinaPackages)
        }
    }
}
